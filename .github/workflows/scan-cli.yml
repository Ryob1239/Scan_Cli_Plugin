name: Scan CLI CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  scan-cli:
    runs-on: ubuntu-latest

    steps:
      # 1. Verificar el c칩digo
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Crear el directorio de reportes si no existe
      - name: Ensure report directory exists
        run: mkdir -p ./reports

      # 3. Autenticaci칩n para Docker Hub utilizando GitHub Secrets
      - name: Docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 4. Construir la imagen de Docker (si es necesario)
      - name: Build Docker Image
        run: |
          docker build -t scan-cli-plugin:latest .

      # 5. Ejecutar el an치lisis con Docker Scout (Imagen correcta)
      - name: Run Docker Scout CVE Scan
        run: |
          docker run --rm \
            -v /var/run/docker.sock:/var/run/docker.sock \
            docker/scout-cli:latest cves scan-cli-plugin:latest > ./reports/report.json

      # 6. Subir el reporte como artefacto
      - name: Upload Report
        uses: actions/upload-artifact@v3
        with:
          name: scan-cli-report
          path: ./reports/report.json

      # 7. Enviar un comentario en el PR con el estado del trabajo
      - name: Post status update to PR
        uses: actions/github-script@v6
        with:
          script: |
            const pr = github.context.payload.pull_request;
            if (pr) {
              await github.rest.issues.createComment({
                issue_number: pr.number,
                owner: github.context.repo.owner,
                repo: github.context.repo.repo,
                body: "El an치lisis de seguridad de Docker Scout ha finalizado. El reporte se ha generado y subido como artefacto."
              });
            }
